{
  "components": {
    "schemas": {
      "Error": {
        "properties": {
          "details": {
            "description": "Additional error details (optional)",
            "type": "object"
          },
          "error": {
            "description": "Error code",
            "type": "string"
          },
          "message": {
            "description": "Human-readable error message",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HealthCheck": {
        "properties": {
          "db_connected": {
            "example": true,
            "type": "boolean"
          },
          "status": {
            "example": "healthy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LoginRequest": {
        "properties": {
          "email": {
            "description": "User's email address",
            "example": "admin@example.com",
            "format": "email",
            "type": "string"
          },
          "password": {
            "description": "User's password",
            "example": "securepassword123",
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "type": "object"
      },
      "LoginResponse": {
        "properties": {
          "tokens": {
            "properties": {
              "access_token": {
                "description": "JWT access token",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ",
                "type": "string"
              },
              "refresh_token": {
                "description": "JWT refresh token",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                "type": "string"
              },
              "token_type": {
                "description": "Type of token",
                "enum": [
                  "Bearer"
                ],
                "example": "Bearer",
                "type": "string"
              }
            },
            "type": "object"
          },
          "user": {
            "properties": {
              "email": {
                "description": "User's email address",
                "example": "admin@example.com",
                "format": "email",
                "type": "string"
              },
              "id": {
                "description": "User's unique identifier",
                "example": "12345678-1234-5678-1234-567812345678",
                "type": "string"
              },
              "role": {
                "description": "User's role in the system",
                "enum": [
                  "admin"
                ],
                "example": "admin",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Property": {
        "properties": {
          "address": {
            "description": "Property address",
            "type": "string"
          },
          "country": {
            "description": "Country where the property is located",
            "type": "string"
          },
          "created_at": {
            "description": "Creation timestamp",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Detailed description of the property",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the property",
            "type": "string"
          },
          "images": {
            "description": "Array of image URLs",
            "items": {
              "format": "uri",
              "type": "string"
            },
            "type": "array"
          },
          "postal_code": {
            "description": "Postal/ZIP code",
            "type": "string"
          },
          "price": {
            "description": "Rental price",
            "format": "float",
            "type": "number"
          },
          "title": {
            "description": "Title of the property listing",
            "type": "string"
          },
          "updated_at": {
            "description": "Last update timestamp",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokensResponse": {
        "properties": {
          "access_token": {
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ",
            "type": "string"
          },
          "token_type": {
            "description": "Type of token",
            "enum": [
              "Bearer"
            ],
            "example": "Bearer",
            "type": "string"
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "created_at": {
            "description": "Creation timestamp",
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "description": "User's email address",
            "format": "email",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the user",
            "type": "string"
          },
          "role": {
            "description": "User's role in the system",
            "enum": [
              "admin"
            ],
            "type": "string"
          },
          "updated_at": {
            "description": "Last update timestamp",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "email": "support@example.com",
      "name": "API Support"
    },
    "description": "A secure REST API for managing rental property listings",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "title": "Rental Properties Admin API",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/auth/login": {
      "post": {
        "description": "Login with email and password to receive JWT tokens for API access. Use the returned access_token in the Authorization header (format 'Bearer {token}') for authenticated endpoints.",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "invalid": {
                  "summary": "Invalid credentials example",
                  "value": {
                    "email": "wrong@example.com",
                    "password": "wrongpassword"
                  }
                },
                "success": {
                  "summary": "Valid login credentials",
                  "value": {
                    "email": "admin@example.com",
                    "password": "securepassword123"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "tokens": {
                    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "token_type": "Bearer"
                  },
                  "user": {
                    "email": "admin@example.com",
                    "id": "12345678-1234-5678-1234-567812345678",
                    "role": "admin"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            },
            "description": "Login successful"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "error": "authentication_error",
                  "message": "Invalid email or password"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication failed"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "details": {
                    "email": "Not a valid email address"
                  },
                  "error": "validation_error",
                  "message": "Invalid input data"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "error": "server_error",
                  "message": "Internal server error"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "summary": "User login",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "description": "Get a new access token using a valid refresh token",
        "parameters": [
          {
            "description": "JWT refresh token with Bearer prefix",
            "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "schema": {
              "properties": {
                "access_token": {
                  "description": "JWT access token",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ",
                  "type": "string"
                },
                "token_type": {
                  "description": "Type of token",
                  "enum": [
                    "Bearer"
                  ],
                  "example": "Bearer",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Invalid or missing refresh token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "summary": "Refresh JWT access token",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/users": {
      "get": {
        "description": "Retrieve a list of all users in the system",
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Authentication error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get all users",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "description": "Create a new user account with email and password",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "description": "User's email address",
                  "example": "user@example.com",
                  "format": "email",
                  "type": "string"
                },
                "password": {
                  "description": "User's password (will be securely hashed)",
                  "example": "securepassword123",
                  "minLength": 8,
                  "type": "string"
                },
                "role": {
                  "default": "admin",
                  "description": "User's role (optional, defaults to 'admin')",
                  "enum": [
                    "admin"
                  ],
                  "example": "admin",
                  "type": "string"
                }
              },
              "required": [
                "email",
                "password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid input data or email already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "summary": "Create a new user",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/auth/users/{user_id}": {
      "delete": {
        "description": "Remove a user from the system",
        "parameters": [
          {
            "description": "Unique identifier of the user to delete",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "schema": {
              "properties": {
                "message": {
                  "example": "User with ID '1234' deleted successfully",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Authentication error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Delete a user by ID",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Retrieve a specific user by their ID",
        "parameters": [
          {
            "description": "Unique identifier of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "summary": "Get a user by ID",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Update an existing user's information",
        "parameters": [
          {
            "description": "Unique identifier of the user to update",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "description": "User's email address",
                  "example": "updated@example.com",
                  "format": "email",
                  "type": "string"
                },
                "password": {
                  "description": "User's password (will be securely hashed)",
                  "example": "newpassword456",
                  "minLength": 8,
                  "type": "string"
                },
                "role": {
                  "description": "User's role",
                  "enum": [
                    "admin"
                  ],
                  "example": "admin",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid input data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update a user by ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/properties": {
      "get": {
        "description": "Retrieve a list of rental properties with optional filtering",
        "parameters": [
          {
            "description": "Filter properties by country",
            "in": "query",
            "name": "country",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter properties by postal/ZIP code",
            "in": "query",
            "name": "postal_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Minimum price filter",
            "format": "float",
            "in": "query",
            "name": "price_min",
            "required": false,
            "type": "number"
          },
          {
            "description": "Maximum price filter",
            "format": "float",
            "in": "query",
            "name": "price_max",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "List of properties",
            "schema": {
              "items": {
                "$ref": "#/definitions/Property"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized - valid JWT token required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Retrieve rental properties",
        "tags": [
          "Properties"
        ]
      },
      "post": {
        "description": "Create a new rental property listing",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "address": {
                  "description": "Full address of the property",
                  "example": "123 Main Street, Apt 4B",
                  "type": "string"
                },
                "country": {
                  "description": "Country where the property is located",
                  "example": "United States",
                  "type": "string"
                },
                "description": {
                  "description": "Detailed description of the property",
                  "example": "Beautiful apartment with modern amenities...",
                  "type": "string"
                },
                "images": {
                  "description": "Array of image URLs",
                  "example": [
                    "https://example.com/image1.jpg",
                    "https://example.com/image2.jpg"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "postal_code": {
                  "description": "Postal/ZIP code",
                  "example": "10001",
                  "type": "string"
                },
                "price": {
                  "description": "Monthly rental price",
                  "example": 1500.0,
                  "format": "float",
                  "type": "number"
                },
                "title": {
                  "description": "Title of the property listing",
                  "example": "Spacious 2-bedroom apartment with garden view",
                  "type": "string"
                }
              },
              "required": [
                "title",
                "address",
                "country",
                "price"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Property created successfully",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "400": {
            "description": "Invalid input data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - valid JWT token required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create a new property",
        "tags": [
          "Properties"
        ]
      }
    },
    "/api/properties/{property_id}": {
      "delete": {
        "description": "Remove a property from the system",
        "parameters": [
          {
            "description": "Unique identifier of the property to delete",
            "in": "path",
            "name": "property_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Property deleted successfully",
            "schema": {
              "properties": {
                "message": {
                  "example": "Property deleted successfully",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - valid JWT token required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Property not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Delete a property",
        "tags": [
          "Properties"
        ]
      },
      "get": {
        "description": "Retrieve a specific property by its ID",
        "parameters": [
          {
            "description": "Unique identifier of the property",
            "in": "path",
            "name": "property_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Property details",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "401": {
            "description": "Unauthorized - valid JWT token required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Property not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get a property by ID",
        "tags": [
          "Properties"
        ]
      },
      "put": {
        "description": "Update an existing property's information",
        "parameters": [
          {
            "description": "Unique identifier of the property to update",
            "in": "path",
            "name": "property_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "address": {
                  "description": "Full address of the property",
                  "type": "string"
                },
                "country": {
                  "description": "Country where the property is located",
                  "type": "string"
                },
                "description": {
                  "description": "Detailed description of the property",
                  "type": "string"
                },
                "images": {
                  "description": "Array of image URLs",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "postal_code": {
                  "description": "Postal/ZIP code",
                  "type": "string"
                },
                "price": {
                  "description": "Monthly rental price",
                  "format": "float",
                  "type": "number"
                },
                "title": {
                  "description": "Title of the property listing",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Property updated successfully",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "400": {
            "description": "Invalid input data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized - valid JWT token required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Property not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update a property",
        "tags": [
          "Properties"
        ]
      }
    },
    "/health": {
      "get": {
        "description": "Check if the API is running and connected to the database",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheck"
                }
              }
            },
            "description": "API is healthy"
          }
        },
        "summary": "Health Check Endpoint",
        "tags": [
          "System"
        ]
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "servers": [
    {
      "description": "Local development server",
      "url": "/"
    }
  ],
  "tags": [
    {
      "description": "User authentication and token management",
      "name": "Authentication"
    },
    {
      "description": "User management operations",
      "name": "Users"
    },
    {
      "description": "Rental property operations",
      "name": "Properties"
    },
    {
      "description": "System operations and diagnostics",
      "name": "System"
    }
  ]
}
